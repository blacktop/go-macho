package main

import (
	"bufio"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strings"
	"time"
)

const (
	valueWitnessURL    = "https://raw.githubusercontent.com/swiftlang/swift/main/include/swift/Demangling/ValueWitnessMangling.def"
	valueWitnessOut    = "types/swift/value_witness_generated.go"
	valueWitnessSource = "swiftlang/swift/main/include/swift/Demangling/ValueWitnessMangling.def"
)

type witnessEntry struct {
	code string
	name string
}

var valueRegex = regexp.MustCompile(`^VALUE_WITNESS\(\s*([^,]+),\s*([^)]+)\)`)

func main() {
	resp, err := http.Get(valueWitnessURL)
	if err != nil {
		fatal(fmt.Errorf("failed to GET %s: %w", valueWitnessURL, err))
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		fatal(fmt.Errorf("unexpected status %s fetching %s", resp.Status, valueWitnessURL))
	}

	entries, err := parseValueWitnesses(resp.Body)
	if err != nil {
		fatal(err)
	}

	if err := writeValueWitnesses(entries, valueWitnessOut, valueWitnessSource); err != nil {
		fatal(err)
	}
}

func parseValueWitnesses(r io.Reader) ([]witnessEntry, error) {
	scanner := bufio.NewScanner(r)
	var entries []witnessEntry
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" || strings.HasPrefix(line, "//") || strings.HasPrefix(line, "#") {
			continue
		}
		matches := valueRegex.FindStringSubmatch(line)
		if len(matches) == 0 {
			continue
		}
		entries = append(entries, witnessEntry{
			code: matches[1],
			name: matches[2],
		})
	}
	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return entries, nil
}

func writeValueWitnesses(entries []witnessEntry, outFile, source string) error {
	sort.Slice(entries, func(i, j int) bool {
		if entries[i].name == entries[j].name {
			return entries[i].code < entries[j].code
		}
		return entries[i].name < entries[j].name
	})

	dateStamp := time.Now().UTC().Format("2006-01-02")
	var builder strings.Builder
	builder.WriteString("// Code generated by types/swift/cmd/genvaluewitnesses; DO NOT EDIT.\n")
	if source != "" {
		builder.WriteString("// Source: " + source + "\n")
	}
	builder.WriteString("// Generated: " + dateStamp + "\n")
	builder.WriteString("package swift\n\n")

	builder.WriteString("var ValueWitnessByCode = map[string]string{\n")
	for _, e := range entries {
		builder.WriteString(fmt.Sprintf("\t%q: %q,\n", e.code, e.name))
	}
	builder.WriteString("}\n\n")

	builder.WriteString("var ValueWitnessCodeByName = map[string]string{\n")
	for _, e := range entries {
		builder.WriteString(fmt.Sprintf("\t%q: %q,\n", e.name, e.code))
	}
	builder.WriteString("}\n")

	if err := os.MkdirAll(filepath.Dir(outFile), 0o755); err != nil {
		return err
	}
	return os.WriteFile(outFile, []byte(builder.String()), 0o644)
}

func fatal(err error) {
	fmt.Fprintf(os.Stderr, "genvaluewitnesses: %v\n", err)
	os.Exit(1)
}
